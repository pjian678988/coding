抽象工厂模式：
提供一个创建一系列相互依赖对象的接口，而无需指定它们具体的类。
通常是在运行时刻再创建一个ConcreteFactory类的实例，这个具体的工厂再创建具有特定实现
的产品对象，也就是说，为创建不同的产品对象，客户端应使用不同的具体工厂。

反射： 优点是可以在运行时决定所发生的动作，而不是在编译时。
.net Assembly.Load("程序集名称").CreateInstance("命名空间.类名")
java Class.forName(string);

所有在简单工厂的地方，都可以考虑用反射技术来去除switch或if，解除分支判断带来的耦合
