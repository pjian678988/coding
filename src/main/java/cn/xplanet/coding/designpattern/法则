OO
	SOLID (Single responsibility, Open-closed, Liskov substitution, Interface segregation and Dependency inversion) 
	单一职责	开-闭		里氏替换	接口隔离	依赖倒转


1.单一职责原则 single responsibility principle
	就一个类而言，应该仅有一个引起它变化的原因
	
2.开放-封闭原则
	是说软件实体（类，模块，函数等）应该可以扩展，但是不可修改。
	对扩展是开放的，对更改是封闭的。
	面对需求，对程序的改动是通过增加新代码进行的，而不是更改现有的代码。
	
3.依赖倒转原则
	抽象不应该依赖细节，细节应该依赖于抽象。
	针对接口编程，不要对实现编程。
	
4.里氏代换原则
	一个软件实体如果使用的是一个父类的话，那么一定适用于其子类，而它察觉不出父类对象和子类对象
	的区别。也就是说，在软件里面，把父类都替换成它的子类，程序的行为没有变化。
	子类型必须能够替换它们的父类型。
	继承复用
	
5.迪米特法则/最少知识原则
	如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。
	如果其中一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用
	
6.合成/聚合复用原则
	尽量使用合成/聚合，尽量不要使用类继承。
	优先使用对象的合成/聚合将有助于你保持每个类被封装，并被集中在单个任务上。这样类和类继承
	层次会保持较小规模，并且不太可能增长为不可控制的庞然大物。
